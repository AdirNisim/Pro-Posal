// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Offer is an object representing the database table.
type Offer struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedBy          string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CustomerID         string      `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	CompanyID          string      `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	ContractTemplateID string      `boil:"contract_template_id" json:"contract_template_id" toml:"contract_template_id" yaml:"contract_template_id"`
	Arguments          types.JSON  `boil:"arguments" json:"arguments" toml:"arguments" yaml:"arguments"`
	FinalizedOffer     null.String `boil:"finalized_offer" json:"finalized_offer,omitempty" toml:"finalized_offer" yaml:"finalized_offer,omitempty"`
	FinalizedAt        time.Time   `boil:"finalized_at" json:"finalized_at" toml:"finalized_at" yaml:"finalized_at"`
	SentAt             null.Time   `boil:"sent_at" json:"sent_at,omitempty" toml:"sent_at" yaml:"sent_at,omitempty"`
	OpenedAt           null.Time   `boil:"opened_at" json:"opened_at,omitempty" toml:"opened_at" yaml:"opened_at,omitempty"`
	AcceptedAt         null.Time   `boil:"accepted_at" json:"accepted_at,omitempty" toml:"accepted_at" yaml:"accepted_at,omitempty"`
	RejectedAt         null.Time   `boil:"rejected_at" json:"rejected_at,omitempty" toml:"rejected_at" yaml:"rejected_at,omitempty"`
	RejectionReason    null.String `boil:"rejection_reason" json:"rejection_reason,omitempty" toml:"rejection_reason" yaml:"rejection_reason,omitempty"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *offerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L offerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OfferColumns = struct {
	ID                 string
	CreatedBy          string
	CustomerID         string
	CompanyID          string
	ContractTemplateID string
	Arguments          string
	FinalizedOffer     string
	FinalizedAt        string
	SentAt             string
	OpenedAt           string
	AcceptedAt         string
	RejectedAt         string
	RejectionReason    string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	CreatedBy:          "created_by",
	CustomerID:         "customer_id",
	CompanyID:          "company_id",
	ContractTemplateID: "contract_template_id",
	Arguments:          "arguments",
	FinalizedOffer:     "finalized_offer",
	FinalizedAt:        "finalized_at",
	SentAt:             "sent_at",
	OpenedAt:           "opened_at",
	AcceptedAt:         "accepted_at",
	RejectedAt:         "rejected_at",
	RejectionReason:    "rejection_reason",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var OfferTableColumns = struct {
	ID                 string
	CreatedBy          string
	CustomerID         string
	CompanyID          string
	ContractTemplateID string
	Arguments          string
	FinalizedOffer     string
	FinalizedAt        string
	SentAt             string
	OpenedAt           string
	AcceptedAt         string
	RejectedAt         string
	RejectionReason    string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "offers.id",
	CreatedBy:          "offers.created_by",
	CustomerID:         "offers.customer_id",
	CompanyID:          "offers.company_id",
	ContractTemplateID: "offers.contract_template_id",
	Arguments:          "offers.arguments",
	FinalizedOffer:     "offers.finalized_offer",
	FinalizedAt:        "offers.finalized_at",
	SentAt:             "offers.sent_at",
	OpenedAt:           "offers.opened_at",
	AcceptedAt:         "offers.accepted_at",
	RejectedAt:         "offers.rejected_at",
	RejectionReason:    "offers.rejection_reason",
	CreatedAt:          "offers.created_at",
	UpdatedAt:          "offers.updated_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var OfferWhere = struct {
	ID                 whereHelperstring
	CreatedBy          whereHelperstring
	CustomerID         whereHelperstring
	CompanyID          whereHelperstring
	ContractTemplateID whereHelperstring
	Arguments          whereHelpertypes_JSON
	FinalizedOffer     whereHelpernull_String
	FinalizedAt        whereHelpertime_Time
	SentAt             whereHelpernull_Time
	OpenedAt           whereHelpernull_Time
	AcceptedAt         whereHelpernull_Time
	RejectedAt         whereHelpernull_Time
	RejectionReason    whereHelpernull_String
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"offers\".\"id\""},
	CreatedBy:          whereHelperstring{field: "\"offers\".\"created_by\""},
	CustomerID:         whereHelperstring{field: "\"offers\".\"customer_id\""},
	CompanyID:          whereHelperstring{field: "\"offers\".\"company_id\""},
	ContractTemplateID: whereHelperstring{field: "\"offers\".\"contract_template_id\""},
	Arguments:          whereHelpertypes_JSON{field: "\"offers\".\"arguments\""},
	FinalizedOffer:     whereHelpernull_String{field: "\"offers\".\"finalized_offer\""},
	FinalizedAt:        whereHelpertime_Time{field: "\"offers\".\"finalized_at\""},
	SentAt:             whereHelpernull_Time{field: "\"offers\".\"sent_at\""},
	OpenedAt:           whereHelpernull_Time{field: "\"offers\".\"opened_at\""},
	AcceptedAt:         whereHelpernull_Time{field: "\"offers\".\"accepted_at\""},
	RejectedAt:         whereHelpernull_Time{field: "\"offers\".\"rejected_at\""},
	RejectionReason:    whereHelpernull_String{field: "\"offers\".\"rejection_reason\""},
	CreatedAt:          whereHelpertime_Time{field: "\"offers\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"offers\".\"updated_at\""},
}

// OfferRels is where relationship names are stored.
var OfferRels = struct {
	Company          string
	ContractTemplate string
	CreatedByUser    string
	Customer         string
}{
	Company:          "Company",
	ContractTemplate: "ContractTemplate",
	CreatedByUser:    "CreatedByUser",
	Customer:         "Customer",
}

// offerR is where relationships are stored.
type offerR struct {
	Company          *Company          `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	ContractTemplate *ContractTemplate `boil:"ContractTemplate" json:"ContractTemplate" toml:"ContractTemplate" yaml:"ContractTemplate"`
	CreatedByUser    *User             `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	Customer         *User             `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
}

// NewStruct creates a new relationship struct
func (*offerR) NewStruct() *offerR {
	return &offerR{}
}

func (r *offerR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *offerR) GetContractTemplate() *ContractTemplate {
	if r == nil {
		return nil
	}
	return r.ContractTemplate
}

func (r *offerR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *offerR) GetCustomer() *User {
	if r == nil {
		return nil
	}
	return r.Customer
}

// offerL is where Load methods for each relationship are stored.
type offerL struct{}

var (
	offerAllColumns            = []string{"id", "created_by", "customer_id", "company_id", "contract_template_id", "arguments", "finalized_offer", "finalized_at", "sent_at", "opened_at", "accepted_at", "rejected_at", "rejection_reason", "created_at", "updated_at"}
	offerColumnsWithoutDefault = []string{"id", "created_by", "customer_id", "company_id", "contract_template_id", "arguments", "finalized_at", "created_at", "updated_at"}
	offerColumnsWithDefault    = []string{"finalized_offer", "sent_at", "opened_at", "accepted_at", "rejected_at", "rejection_reason"}
	offerPrimaryKeyColumns     = []string{"id"}
	offerGeneratedColumns      = []string{}
)

type (
	// OfferSlice is an alias for a slice of pointers to Offer.
	// This should almost always be used instead of []Offer.
	OfferSlice []*Offer

	offerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	offerType                 = reflect.TypeOf(&Offer{})
	offerMapping              = queries.MakeStructMapping(offerType)
	offerPrimaryKeyMapping, _ = queries.BindMapping(offerType, offerMapping, offerPrimaryKeyColumns)
	offerInsertCacheMut       sync.RWMutex
	offerInsertCache          = make(map[string]insertCache)
	offerUpdateCacheMut       sync.RWMutex
	offerUpdateCache          = make(map[string]updateCache)
	offerUpsertCacheMut       sync.RWMutex
	offerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single offer record from the query.
func (q offerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Offer, error) {
	o := &Offer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for offers")
	}

	return o, nil
}

// All returns all Offer records from the query.
func (q offerQuery) All(ctx context.Context, exec boil.ContextExecutor) (OfferSlice, error) {
	var o []*Offer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to Offer slice")
	}

	return o, nil
}

// Count returns the count of all Offer records in the query.
func (q offerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count offers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q offerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if offers exists")
	}

	return count > 0, nil
}

// Company pointed to by the foreign key.
func (o *Offer) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// ContractTemplate pointed to by the foreign key.
func (o *Offer) ContractTemplate(mods ...qm.QueryMod) contractTemplateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContractTemplateID),
	}

	queryMods = append(queryMods, mods...)

	return ContractTemplates(queryMods...)
}

// CreatedByUser pointed to by the foreign key.
func (o *Offer) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Customer pointed to by the foreign key.
func (o *Offer) Customer(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (offerL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOffer interface{}, mods queries.Applicator) error {
	var slice []*Offer
	var object *Offer

	if singular {
		var ok bool
		object, ok = maybeOffer.(*Offer)
		if !ok {
			object = new(Offer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOffer))
			}
		}
	} else {
		s, ok := maybeOffer.(*[]*Offer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOffer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerR{}
		}
		args[object.CompanyID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerR{}
			}

			args[obj.CompanyID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`companies`),
		qm.WhereIn(`companies.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.Offers = append(foreign.R.Offers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyID == foreign.ID {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.Offers = append(foreign.R.Offers, local)
				break
			}
		}
	}

	return nil
}

// LoadContractTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (offerL) LoadContractTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOffer interface{}, mods queries.Applicator) error {
	var slice []*Offer
	var object *Offer

	if singular {
		var ok bool
		object, ok = maybeOffer.(*Offer)
		if !ok {
			object = new(Offer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOffer))
			}
		}
	} else {
		s, ok := maybeOffer.(*[]*Offer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOffer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerR{}
		}
		args[object.ContractTemplateID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerR{}
			}

			args[obj.ContractTemplateID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`contract_templates`),
		qm.WhereIn(`contract_templates.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContractTemplate")
	}

	var resultSlice []*ContractTemplate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContractTemplate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contract_templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contract_templates")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContractTemplate = foreign
		if foreign.R == nil {
			foreign.R = &contractTemplateR{}
		}
		foreign.R.Offers = append(foreign.R.Offers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContractTemplateID == foreign.ID {
				local.R.ContractTemplate = foreign
				if foreign.R == nil {
					foreign.R = &contractTemplateR{}
				}
				foreign.R.Offers = append(foreign.R.Offers, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (offerL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOffer interface{}, mods queries.Applicator) error {
	var slice []*Offer
	var object *Offer

	if singular {
		var ok bool
		object, ok = maybeOffer.(*Offer)
		if !ok {
			object = new(Offer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOffer))
			}
		}
	} else {
		s, ok := maybeOffer.(*[]*Offer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOffer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerR{}
		}
		args[object.CreatedBy] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerR{}
			}

			args[obj.CreatedBy] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByOffers = append(foreign.R.CreatedByOffers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedBy == foreign.ID {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByOffers = append(foreign.R.CreatedByOffers, local)
				break
			}
		}
	}

	return nil
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (offerL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOffer interface{}, mods queries.Applicator) error {
	var slice []*Offer
	var object *Offer

	if singular {
		var ok bool
		object, ok = maybeOffer.(*Offer)
		if !ok {
			object = new(Offer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOffer))
			}
		}
	} else {
		s, ok := maybeOffer.(*[]*Offer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOffer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerR{}
		}
		args[object.CustomerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerR{}
			}

			args[obj.CustomerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CustomerOffers = append(foreign.R.CustomerOffers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CustomerID == foreign.ID {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CustomerOffers = append(foreign.R.CustomerOffers, local)
				break
			}
		}
	}

	return nil
}

// SetCompany of the offer to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Offers.
func (o *Offer) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
		strmangle.WhereClause("\"", "\"", 2, offerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyID = related.ID
	if o.R == nil {
		o.R = &offerR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			Offers: OfferSlice{o},
		}
	} else {
		related.R.Offers = append(related.R.Offers, o)
	}

	return nil
}

// SetContractTemplate of the offer to the related item.
// Sets o.R.ContractTemplate to related.
// Adds o to related.R.Offers.
func (o *Offer) SetContractTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ContractTemplate) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"contract_template_id"}),
		strmangle.WhereClause("\"", "\"", 2, offerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContractTemplateID = related.ID
	if o.R == nil {
		o.R = &offerR{
			ContractTemplate: related,
		}
	} else {
		o.R.ContractTemplate = related
	}

	if related.R == nil {
		related.R = &contractTemplateR{
			Offers: OfferSlice{o},
		}
	} else {
		related.R.Offers = append(related.R.Offers, o)
	}

	return nil
}

// SetCreatedByUser of the offer to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByOffers.
func (o *Offer) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, offerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedBy = related.ID
	if o.R == nil {
		o.R = &offerR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByOffers: OfferSlice{o},
		}
	} else {
		related.R.CreatedByOffers = append(related.R.CreatedByOffers, o)
	}

	return nil
}

// SetCustomer of the offer to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.CustomerOffers.
func (o *Offer) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"customer_id"}),
		strmangle.WhereClause("\"", "\"", 2, offerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CustomerID = related.ID
	if o.R == nil {
		o.R = &offerR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &userR{
			CustomerOffers: OfferSlice{o},
		}
	} else {
		related.R.CustomerOffers = append(related.R.CustomerOffers, o)
	}

	return nil
}

// Offers retrieves all the records using an executor.
func Offers(mods ...qm.QueryMod) offerQuery {
	mods = append(mods, qm.From("\"offers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"offers\".*"})
	}

	return offerQuery{q}
}

// FindOffer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOffer(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Offer, error) {
	offerObj := &Offer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"offers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, offerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from offers")
	}

	return offerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Offer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no offers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(offerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	offerInsertCacheMut.RLock()
	cache, cached := offerInsertCache[key]
	offerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			offerAllColumns,
			offerColumnsWithDefault,
			offerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(offerType, offerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(offerType, offerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"offers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"offers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into offers")
	}

	if !cached {
		offerInsertCacheMut.Lock()
		offerInsertCache[key] = cache
		offerInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Offer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Offer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	offerUpdateCacheMut.RLock()
	cache, cached := offerUpdateCache[key]
	offerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			offerAllColumns,
			offerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update offers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"offers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, offerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(offerType, offerMapping, append(wl, offerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update offers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for offers")
	}

	if !cached {
		offerUpdateCacheMut.Lock()
		offerUpdateCache[key] = cache
		offerUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q offerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for offers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OfferSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, offerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in offer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all offer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Offer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dao: no offers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(offerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	offerUpsertCacheMut.RLock()
	cache, cached := offerUpsertCache[key]
	offerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			offerAllColumns,
			offerColumnsWithDefault,
			offerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			offerAllColumns,
			offerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert offers, could not build update column list")
		}

		ret := strmangle.SetComplement(offerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(offerPrimaryKeyColumns) == 0 {
				return errors.New("dao: unable to upsert offers, could not build conflict column list")
			}

			conflict = make([]string, len(offerPrimaryKeyColumns))
			copy(conflict, offerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"offers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(offerType, offerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(offerType, offerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert offers")
	}

	if !cached {
		offerUpsertCacheMut.Lock()
		offerUpsertCache[key] = cache
		offerUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Offer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Offer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no Offer provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), offerPrimaryKeyMapping)
	sql := "DELETE FROM \"offers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for offers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q offerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no offerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for offers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OfferSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"offers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, offerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from offer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for offers")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Offer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOffer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OfferSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OfferSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"offers\".* FROM \"offers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, offerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in OfferSlice")
	}

	*o = slice

	return nil
}

// OfferExists checks if the Offer row exists.
func OfferExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"offers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if offers exists")
	}

	return exists, nil
}

// Exists checks if the Offer row exists.
func (o *Offer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OfferExists(ctx, exec, o.ID)
}
