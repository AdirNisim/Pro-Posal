// Code generated by MockGen. DO NOT EDIT.
// Source: company_managment_service.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/pro-posal/webserver/models"
)

// MockCompanyManagementService is a mock of CompanyManagementService interface.
type MockCompanyManagementService struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyManagementServiceMockRecorder
}

// MockCompanyManagementServiceMockRecorder is the mock recorder for MockCompanyManagementService.
type MockCompanyManagementServiceMockRecorder struct {
	mock *MockCompanyManagementService
}

// NewMockCompanyManagementService creates a new mock instance.
func NewMockCompanyManagementService(ctrl *gomock.Controller) *MockCompanyManagementService {
	mock := &MockCompanyManagementService{ctrl: ctrl}
	mock.recorder = &MockCompanyManagementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyManagementService) EXPECT() *MockCompanyManagementServiceMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyManagementService) CreateCompany(arg0 context.Context, arg1 CreateCompanyRequest) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", arg0, arg1)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyManagementServiceMockRecorder) CreateCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyManagementService)(nil).CreateCompany), arg0, arg1)
}

// DeleteCompany mocks base method.
func (m *MockCompanyManagementService) DeleteCompany(arg0 context.Context, arg1 string) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", arg0, arg1)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockCompanyManagementServiceMockRecorder) DeleteCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockCompanyManagementService)(nil).DeleteCompany), arg0, arg1)
}

// GetCompanies mocks base method.
func (m *MockCompanyManagementService) GetCompanies(arg0 context.Context, arg1 string) ([]*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanies", arg0, arg1)
	ret0, _ := ret[0].([]*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanies indicates an expected call of GetCompanies.
func (mr *MockCompanyManagementServiceMockRecorder) GetCompanies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanies", reflect.TypeOf((*MockCompanyManagementService)(nil).GetCompanies), arg0, arg1)
}

// UpdateCompany mocks base method.
func (m *MockCompanyManagementService) UpdateCompany(arg0 context.Context, arg1 string, arg2 UpdateCompanyRequest) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockCompanyManagementServiceMockRecorder) UpdateCompany(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockCompanyManagementService)(nil).UpdateCompany), arg0, arg1, arg2)
}
