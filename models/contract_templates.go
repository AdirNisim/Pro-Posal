// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ContractTemplate is an object representing the database table.
type ContractTemplate struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CompanyID string    `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	Template  string    `boil:"template" json:"template" toml:"template" yaml:"template"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *contractTemplateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contractTemplateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContractTemplateColumns = struct {
	ID        string
	Name      string
	CompanyID string
	Template  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	CompanyID: "company_id",
	Template:  "template",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var ContractTemplateTableColumns = struct {
	ID        string
	Name      string
	CompanyID string
	Template  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "contract_templates.id",
	Name:      "contract_templates.name",
	CompanyID: "contract_templates.company_id",
	Template:  "contract_templates.template",
	CreatedAt: "contract_templates.created_at",
	UpdatedAt: "contract_templates.updated_at",
}

// Generated where

var ContractTemplateWhere = struct {
	ID        whereHelperstring
	Name      whereHelperstring
	CompanyID whereHelperstring
	Template  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"contract_templates\".\"id\""},
	Name:      whereHelperstring{field: "\"contract_templates\".\"name\""},
	CompanyID: whereHelperstring{field: "\"contract_templates\".\"company_id\""},
	Template:  whereHelperstring{field: "\"contract_templates\".\"template\""},
	CreatedAt: whereHelpertime_Time{field: "\"contract_templates\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"contract_templates\".\"updated_at\""},
}

// ContractTemplateRels is where relationship names are stored.
var ContractTemplateRels = struct {
	Company string
	Offers  string
}{
	Company: "Company",
	Offers:  "Offers",
}

// contractTemplateR is where relationships are stored.
type contractTemplateR struct {
	Company *Company   `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	Offers  OfferSlice `boil:"Offers" json:"Offers" toml:"Offers" yaml:"Offers"`
}

// NewStruct creates a new relationship struct
func (*contractTemplateR) NewStruct() *contractTemplateR {
	return &contractTemplateR{}
}

func (r *contractTemplateR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *contractTemplateR) GetOffers() OfferSlice {
	if r == nil {
		return nil
	}
	return r.Offers
}

// contractTemplateL is where Load methods for each relationship are stored.
type contractTemplateL struct{}

var (
	contractTemplateAllColumns            = []string{"id", "name", "company_id", "template", "created_at", "updated_at"}
	contractTemplateColumnsWithoutDefault = []string{"id", "name", "company_id", "template", "created_at", "updated_at"}
	contractTemplateColumnsWithDefault    = []string{}
	contractTemplatePrimaryKeyColumns     = []string{"id"}
	contractTemplateGeneratedColumns      = []string{}
)

type (
	// ContractTemplateSlice is an alias for a slice of pointers to ContractTemplate.
	// This should almost always be used instead of []ContractTemplate.
	ContractTemplateSlice []*ContractTemplate
	// ContractTemplateHook is the signature for custom ContractTemplate hook methods
	ContractTemplateHook func(context.Context, boil.ContextExecutor, *ContractTemplate) error

	contractTemplateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contractTemplateType                 = reflect.TypeOf(&ContractTemplate{})
	contractTemplateMapping              = queries.MakeStructMapping(contractTemplateType)
	contractTemplatePrimaryKeyMapping, _ = queries.BindMapping(contractTemplateType, contractTemplateMapping, contractTemplatePrimaryKeyColumns)
	contractTemplateInsertCacheMut       sync.RWMutex
	contractTemplateInsertCache          = make(map[string]insertCache)
	contractTemplateUpdateCacheMut       sync.RWMutex
	contractTemplateUpdateCache          = make(map[string]updateCache)
	contractTemplateUpsertCacheMut       sync.RWMutex
	contractTemplateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contractTemplateAfterSelectMu sync.Mutex
var contractTemplateAfterSelectHooks []ContractTemplateHook

var contractTemplateBeforeInsertMu sync.Mutex
var contractTemplateBeforeInsertHooks []ContractTemplateHook
var contractTemplateAfterInsertMu sync.Mutex
var contractTemplateAfterInsertHooks []ContractTemplateHook

var contractTemplateBeforeUpdateMu sync.Mutex
var contractTemplateBeforeUpdateHooks []ContractTemplateHook
var contractTemplateAfterUpdateMu sync.Mutex
var contractTemplateAfterUpdateHooks []ContractTemplateHook

var contractTemplateBeforeDeleteMu sync.Mutex
var contractTemplateBeforeDeleteHooks []ContractTemplateHook
var contractTemplateAfterDeleteMu sync.Mutex
var contractTemplateAfterDeleteHooks []ContractTemplateHook

var contractTemplateBeforeUpsertMu sync.Mutex
var contractTemplateBeforeUpsertHooks []ContractTemplateHook
var contractTemplateAfterUpsertMu sync.Mutex
var contractTemplateAfterUpsertHooks []ContractTemplateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ContractTemplate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractTemplateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ContractTemplate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractTemplateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ContractTemplate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractTemplateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ContractTemplate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractTemplateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ContractTemplate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractTemplateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ContractTemplate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractTemplateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ContractTemplate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractTemplateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ContractTemplate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractTemplateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ContractTemplate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractTemplateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContractTemplateHook registers your hook function for all future operations.
func AddContractTemplateHook(hookPoint boil.HookPoint, contractTemplateHook ContractTemplateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contractTemplateAfterSelectMu.Lock()
		contractTemplateAfterSelectHooks = append(contractTemplateAfterSelectHooks, contractTemplateHook)
		contractTemplateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		contractTemplateBeforeInsertMu.Lock()
		contractTemplateBeforeInsertHooks = append(contractTemplateBeforeInsertHooks, contractTemplateHook)
		contractTemplateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		contractTemplateAfterInsertMu.Lock()
		contractTemplateAfterInsertHooks = append(contractTemplateAfterInsertHooks, contractTemplateHook)
		contractTemplateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		contractTemplateBeforeUpdateMu.Lock()
		contractTemplateBeforeUpdateHooks = append(contractTemplateBeforeUpdateHooks, contractTemplateHook)
		contractTemplateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		contractTemplateAfterUpdateMu.Lock()
		contractTemplateAfterUpdateHooks = append(contractTemplateAfterUpdateHooks, contractTemplateHook)
		contractTemplateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		contractTemplateBeforeDeleteMu.Lock()
		contractTemplateBeforeDeleteHooks = append(contractTemplateBeforeDeleteHooks, contractTemplateHook)
		contractTemplateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		contractTemplateAfterDeleteMu.Lock()
		contractTemplateAfterDeleteHooks = append(contractTemplateAfterDeleteHooks, contractTemplateHook)
		contractTemplateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		contractTemplateBeforeUpsertMu.Lock()
		contractTemplateBeforeUpsertHooks = append(contractTemplateBeforeUpsertHooks, contractTemplateHook)
		contractTemplateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		contractTemplateAfterUpsertMu.Lock()
		contractTemplateAfterUpsertHooks = append(contractTemplateAfterUpsertHooks, contractTemplateHook)
		contractTemplateAfterUpsertMu.Unlock()
	}
}

// One returns a single contractTemplate record from the query.
func (q contractTemplateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContractTemplate, error) {
	o := &ContractTemplate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for contract_templates")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ContractTemplate records from the query.
func (q contractTemplateQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContractTemplateSlice, error) {
	var o []*ContractTemplate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ContractTemplate slice")
	}

	if len(contractTemplateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ContractTemplate records in the query.
func (q contractTemplateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count contract_templates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contractTemplateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if contract_templates exists")
	}

	return count > 0, nil
}

// Company pointed to by the foreign key.
func (o *ContractTemplate) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// Offers retrieves all the offer's Offers with an executor.
func (o *ContractTemplate) Offers(mods ...qm.QueryMod) offerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"offers\".\"contract_template_id\"=?", o.ID),
	)

	return Offers(queryMods...)
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contractTemplateL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContractTemplate interface{}, mods queries.Applicator) error {
	var slice []*ContractTemplate
	var object *ContractTemplate

	if singular {
		var ok bool
		object, ok = maybeContractTemplate.(*ContractTemplate)
		if !ok {
			object = new(ContractTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContractTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContractTemplate))
			}
		}
	} else {
		s, ok := maybeContractTemplate.(*[]*ContractTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContractTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContractTemplate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contractTemplateR{}
		}
		args[object.CompanyID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contractTemplateR{}
			}

			args[obj.CompanyID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`companies`),
		qm.WhereIn(`companies.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(companyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.ContractTemplates = append(foreign.R.ContractTemplates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyID == foreign.ID {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.ContractTemplates = append(foreign.R.ContractTemplates, local)
				break
			}
		}
	}

	return nil
}

// LoadOffers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contractTemplateL) LoadOffers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContractTemplate interface{}, mods queries.Applicator) error {
	var slice []*ContractTemplate
	var object *ContractTemplate

	if singular {
		var ok bool
		object, ok = maybeContractTemplate.(*ContractTemplate)
		if !ok {
			object = new(ContractTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContractTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContractTemplate))
			}
		}
	} else {
		s, ok := maybeContractTemplate.(*[]*ContractTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContractTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContractTemplate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contractTemplateR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contractTemplateR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`offers`),
		qm.WhereIn(`offers.contract_template_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load offers")
	}

	var resultSlice []*Offer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice offers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on offers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offers")
	}

	if len(offerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Offers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &offerR{}
			}
			foreign.R.ContractTemplate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContractTemplateID {
				local.R.Offers = append(local.R.Offers, foreign)
				if foreign.R == nil {
					foreign.R = &offerR{}
				}
				foreign.R.ContractTemplate = local
				break
			}
		}
	}

	return nil
}

// SetCompany of the contractTemplate to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.ContractTemplates.
func (o *ContractTemplate) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"contract_templates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
		strmangle.WhereClause("\"", "\"", 2, contractTemplatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyID = related.ID
	if o.R == nil {
		o.R = &contractTemplateR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			ContractTemplates: ContractTemplateSlice{o},
		}
	} else {
		related.R.ContractTemplates = append(related.R.ContractTemplates, o)
	}

	return nil
}

// AddOffers adds the given related objects to the existing relationships
// of the contract_template, optionally inserting them as new records.
// Appends related to o.R.Offers.
// Sets related.R.ContractTemplate appropriately.
func (o *ContractTemplate) AddOffers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Offer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContractTemplateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"offers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"contract_template_id"}),
				strmangle.WhereClause("\"", "\"", 2, offerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContractTemplateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contractTemplateR{
			Offers: related,
		}
	} else {
		o.R.Offers = append(o.R.Offers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &offerR{
				ContractTemplate: o,
			}
		} else {
			rel.R.ContractTemplate = o
		}
	}
	return nil
}

// ContractTemplates retrieves all the records using an executor.
func ContractTemplates(mods ...qm.QueryMod) contractTemplateQuery {
	mods = append(mods, qm.From("\"contract_templates\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"contract_templates\".*"})
	}

	return contractTemplateQuery{q}
}

// FindContractTemplate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContractTemplate(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ContractTemplate, error) {
	contractTemplateObj := &ContractTemplate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"contract_templates\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, contractTemplateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from contract_templates")
	}

	if err = contractTemplateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contractTemplateObj, err
	}

	return contractTemplateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContractTemplate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contract_templates provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contractTemplateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contractTemplateInsertCacheMut.RLock()
	cache, cached := contractTemplateInsertCache[key]
	contractTemplateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contractTemplateAllColumns,
			contractTemplateColumnsWithDefault,
			contractTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contractTemplateType, contractTemplateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contractTemplateType, contractTemplateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"contract_templates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"contract_templates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into contract_templates")
	}

	if !cached {
		contractTemplateInsertCacheMut.Lock()
		contractTemplateInsertCache[key] = cache
		contractTemplateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ContractTemplate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContractTemplate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contractTemplateUpdateCacheMut.RLock()
	cache, cached := contractTemplateUpdateCache[key]
	contractTemplateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contractTemplateAllColumns,
			contractTemplatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update contract_templates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"contract_templates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contractTemplatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contractTemplateType, contractTemplateMapping, append(wl, contractTemplatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update contract_templates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for contract_templates")
	}

	if !cached {
		contractTemplateUpdateCacheMut.Lock()
		contractTemplateUpdateCache[key] = cache
		contractTemplateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q contractTemplateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for contract_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for contract_templates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContractTemplateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"contract_templates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contractTemplatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in contractTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all contractTemplate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContractTemplate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no contract_templates provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contractTemplateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contractTemplateUpsertCacheMut.RLock()
	cache, cached := contractTemplateUpsertCache[key]
	contractTemplateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			contractTemplateAllColumns,
			contractTemplateColumnsWithDefault,
			contractTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contractTemplateAllColumns,
			contractTemplatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert contract_templates, could not build update column list")
		}

		ret := strmangle.SetComplement(contractTemplateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(contractTemplatePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert contract_templates, could not build conflict column list")
			}

			conflict = make([]string, len(contractTemplatePrimaryKeyColumns))
			copy(conflict, contractTemplatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"contract_templates\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(contractTemplateType, contractTemplateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contractTemplateType, contractTemplateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert contract_templates")
	}

	if !cached {
		contractTemplateUpsertCacheMut.Lock()
		contractTemplateUpsertCache[key] = cache
		contractTemplateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ContractTemplate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContractTemplate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ContractTemplate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contractTemplatePrimaryKeyMapping)
	sql := "DELETE FROM \"contract_templates\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from contract_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for contract_templates")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contractTemplateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contractTemplateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contract_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contract_templates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContractTemplateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contractTemplateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"contract_templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contractTemplatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contractTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contract_templates")
	}

	if len(contractTemplateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContractTemplate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContractTemplate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContractTemplateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContractTemplateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"contract_templates\".* FROM \"contract_templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contractTemplatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContractTemplateSlice")
	}

	*o = slice

	return nil
}

// ContractTemplateExists checks if the ContractTemplate row exists.
func ContractTemplateExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"contract_templates\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if contract_templates exists")
	}

	return exists, nil
}

// Exists checks if the ContractTemplate row exists.
func (o *ContractTemplate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ContractTemplateExists(ctx, exec, o.ID)
}
