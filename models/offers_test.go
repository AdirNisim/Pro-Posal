// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOffers(t *testing.T) {
	t.Parallel()

	query := Offers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOffersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOffersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Offers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOffersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OfferSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOffersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OfferExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Offer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OfferExists to return true, but got false.")
	}
}

func testOffersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	offerFound, err := FindOffer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if offerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOffersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Offers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOffersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Offers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOffersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	offerOne := &Offer{}
	offerTwo := &Offer{}
	if err = randomize.Struct(seed, offerOne, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}
	if err = randomize.Struct(seed, offerTwo, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = offerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = offerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Offers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOffersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	offerOne := &Offer{}
	offerTwo := &Offer{}
	if err = randomize.Struct(seed, offerOne, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}
	if err = randomize.Struct(seed, offerTwo, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = offerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = offerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func offerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Offer) error {
	*o = Offer{}
	return nil
}

func offerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Offer) error {
	*o = Offer{}
	return nil
}

func offerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Offer) error {
	*o = Offer{}
	return nil
}

func offerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Offer) error {
	*o = Offer{}
	return nil
}

func offerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Offer) error {
	*o = Offer{}
	return nil
}

func offerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Offer) error {
	*o = Offer{}
	return nil
}

func offerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Offer) error {
	*o = Offer{}
	return nil
}

func offerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Offer) error {
	*o = Offer{}
	return nil
}

func offerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Offer) error {
	*o = Offer{}
	return nil
}

func testOffersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Offer{}
	o := &Offer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, offerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Offer object: %s", err)
	}

	AddOfferHook(boil.BeforeInsertHook, offerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	offerBeforeInsertHooks = []OfferHook{}

	AddOfferHook(boil.AfterInsertHook, offerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	offerAfterInsertHooks = []OfferHook{}

	AddOfferHook(boil.AfterSelectHook, offerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	offerAfterSelectHooks = []OfferHook{}

	AddOfferHook(boil.BeforeUpdateHook, offerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	offerBeforeUpdateHooks = []OfferHook{}

	AddOfferHook(boil.AfterUpdateHook, offerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	offerAfterUpdateHooks = []OfferHook{}

	AddOfferHook(boil.BeforeDeleteHook, offerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	offerBeforeDeleteHooks = []OfferHook{}

	AddOfferHook(boil.AfterDeleteHook, offerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	offerAfterDeleteHooks = []OfferHook{}

	AddOfferHook(boil.BeforeUpsertHook, offerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	offerBeforeUpsertHooks = []OfferHook{}

	AddOfferHook(boil.AfterUpsertHook, offerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	offerAfterUpsertHooks = []OfferHook{}
}

func testOffersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOffersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(offerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOfferToOneCompanyUsingCompany(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Offer
	var foreign Company

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CompanyID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Company().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCompanyHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Company) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OfferSlice{&local}
	if err = local.L.LoadCompany(ctx, tx, false, (*[]*Offer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Company = nil
	if err = local.L.LoadCompany(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOfferToOneContractTemplateUsingContractTemplate(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Offer
	var foreign ContractTemplate

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, contractTemplateDBTypes, false, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ContractTemplateID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContractTemplate().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddContractTemplateHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OfferSlice{&local}
	if err = local.L.LoadContractTemplate(ctx, tx, false, (*[]*Offer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContractTemplate == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ContractTemplate = nil
	if err = local.L.LoadContractTemplate(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContractTemplate == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOfferToOneUserUsingCreatedByUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Offer
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CreatedBy = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreatedByUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OfferSlice{&local}
	if err = local.L.LoadCreatedByUser(ctx, tx, false, (*[]*Offer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedByUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreatedByUser = nil
	if err = local.L.LoadCreatedByUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedByUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOfferToOneUserUsingCustomer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Offer
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CustomerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Customer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OfferSlice{&local}
	if err = local.L.LoadCustomer(ctx, tx, false, (*[]*Offer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Customer = nil
	if err = local.L.LoadCustomer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOfferToOneSetOpCompanyUsingCompany(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Offer
	var b, c Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, offerDBTypes, false, strmangle.SetComplement(offerPrimaryKeyColumns, offerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Company{&b, &c} {
		err = a.SetCompany(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Company != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Offers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CompanyID != x.ID {
			t.Error("foreign key was wrong value", a.CompanyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CompanyID))
		reflect.Indirect(reflect.ValueOf(&a.CompanyID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CompanyID != x.ID {
			t.Error("foreign key was wrong value", a.CompanyID, x.ID)
		}
	}
}
func testOfferToOneSetOpContractTemplateUsingContractTemplate(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Offer
	var b, c ContractTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, offerDBTypes, false, strmangle.SetComplement(offerPrimaryKeyColumns, offerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, contractTemplateDBTypes, false, strmangle.SetComplement(contractTemplatePrimaryKeyColumns, contractTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contractTemplateDBTypes, false, strmangle.SetComplement(contractTemplatePrimaryKeyColumns, contractTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ContractTemplate{&b, &c} {
		err = a.SetContractTemplate(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ContractTemplate != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Offers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ContractTemplateID != x.ID {
			t.Error("foreign key was wrong value", a.ContractTemplateID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ContractTemplateID))
		reflect.Indirect(reflect.ValueOf(&a.ContractTemplateID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ContractTemplateID != x.ID {
			t.Error("foreign key was wrong value", a.ContractTemplateID, x.ID)
		}
	}
}
func testOfferToOneSetOpUserUsingCreatedByUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Offer
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, offerDBTypes, false, strmangle.SetComplement(offerPrimaryKeyColumns, offerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetCreatedByUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreatedByUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatedByOffers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CreatedBy != x.ID {
			t.Error("foreign key was wrong value", a.CreatedBy)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatedBy))
		reflect.Indirect(reflect.ValueOf(&a.CreatedBy)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CreatedBy != x.ID {
			t.Error("foreign key was wrong value", a.CreatedBy, x.ID)
		}
	}
}
func testOfferToOneSetOpUserUsingCustomer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Offer
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, offerDBTypes, false, strmangle.SetComplement(offerPrimaryKeyColumns, offerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetCustomer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Customer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CustomerOffers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CustomerID != x.ID {
			t.Error("foreign key was wrong value", a.CustomerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CustomerID))
		reflect.Indirect(reflect.ValueOf(&a.CustomerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CustomerID != x.ID {
			t.Error("foreign key was wrong value", a.CustomerID, x.ID)
		}
	}
}

func testOffersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOffersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OfferSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOffersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Offers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	offerDBTypes = map[string]string{`ID`: `uuid`, `CreatedBy`: `uuid`, `CustomerID`: `uuid`, `CompanyID`: `uuid`, `ContractTemplateID`: `uuid`, `Arguments`: `jsonb`, `FinalizedOffer`: `text`, `FinalizedAt`: `timestamp without time zone`, `SentAt`: `timestamp without time zone`, `OpenedAt`: `timestamp without time zone`, `AcceptedAt`: `timestamp without time zone`, `RejectedAt`: `timestamp without time zone`, `RejectionReason`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testOffersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(offerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(offerAllColumns) == len(offerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, offerDBTypes, true, offerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOffersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(offerAllColumns) == len(offerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Offer{}
	if err = randomize.Struct(seed, o, offerDBTypes, true, offerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, offerDBTypes, true, offerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(offerAllColumns, offerPrimaryKeyColumns) {
		fields = offerAllColumns
	} else {
		fields = strmangle.SetComplement(
			offerAllColumns,
			offerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OfferSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOffersUpsert(t *testing.T) {
	t.Parallel()

	if len(offerAllColumns) == len(offerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Offer{}
	if err = randomize.Struct(seed, &o, offerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Offer: %s", err)
	}

	count, err := Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, offerDBTypes, false, offerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Offer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Offer: %s", err)
	}

	count, err = Offers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
