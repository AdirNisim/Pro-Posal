// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Categories", testCategories)
	t.Run("Companies", testCompanies)
	t.Run("ContractTemplates", testContractTemplates)
	t.Run("Offers", testOffers)
	t.Run("Permissions", testPermissions)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Categories", testCategoriesDelete)
	t.Run("Companies", testCompaniesDelete)
	t.Run("ContractTemplates", testContractTemplatesDelete)
	t.Run("Offers", testOffersDelete)
	t.Run("Permissions", testPermissionsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("Companies", testCompaniesQueryDeleteAll)
	t.Run("ContractTemplates", testContractTemplatesQueryDeleteAll)
	t.Run("Offers", testOffersQueryDeleteAll)
	t.Run("Permissions", testPermissionsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("Companies", testCompaniesSliceDeleteAll)
	t.Run("ContractTemplates", testContractTemplatesSliceDeleteAll)
	t.Run("Offers", testOffersSliceDeleteAll)
	t.Run("Permissions", testPermissionsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Categories", testCategoriesExists)
	t.Run("Companies", testCompaniesExists)
	t.Run("ContractTemplates", testContractTemplatesExists)
	t.Run("Offers", testOffersExists)
	t.Run("Permissions", testPermissionsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Categories", testCategoriesFind)
	t.Run("Companies", testCompaniesFind)
	t.Run("ContractTemplates", testContractTemplatesFind)
	t.Run("Offers", testOffersFind)
	t.Run("Permissions", testPermissionsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Categories", testCategoriesBind)
	t.Run("Companies", testCompaniesBind)
	t.Run("ContractTemplates", testContractTemplatesBind)
	t.Run("Offers", testOffersBind)
	t.Run("Permissions", testPermissionsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Categories", testCategoriesOne)
	t.Run("Companies", testCompaniesOne)
	t.Run("ContractTemplates", testContractTemplatesOne)
	t.Run("Offers", testOffersOne)
	t.Run("Permissions", testPermissionsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Categories", testCategoriesAll)
	t.Run("Companies", testCompaniesAll)
	t.Run("ContractTemplates", testContractTemplatesAll)
	t.Run("Offers", testOffersAll)
	t.Run("Permissions", testPermissionsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Categories", testCategoriesCount)
	t.Run("Companies", testCompaniesCount)
	t.Run("ContractTemplates", testContractTemplatesCount)
	t.Run("Offers", testOffersCount)
	t.Run("Permissions", testPermissionsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Categories", testCategoriesHooks)
	t.Run("Companies", testCompaniesHooks)
	t.Run("ContractTemplates", testContractTemplatesHooks)
	t.Run("Offers", testOffersHooks)
	t.Run("Permissions", testPermissionsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("Companies", testCompaniesInsert)
	t.Run("Companies", testCompaniesInsertWhitelist)
	t.Run("ContractTemplates", testContractTemplatesInsert)
	t.Run("ContractTemplates", testContractTemplatesInsertWhitelist)
	t.Run("Offers", testOffersInsert)
	t.Run("Offers", testOffersInsertWhitelist)
	t.Run("Permissions", testPermissionsInsert)
	t.Run("Permissions", testPermissionsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Categories", testCategoriesReload)
	t.Run("Companies", testCompaniesReload)
	t.Run("ContractTemplates", testContractTemplatesReload)
	t.Run("Offers", testOffersReload)
	t.Run("Permissions", testPermissionsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("Companies", testCompaniesReloadAll)
	t.Run("ContractTemplates", testContractTemplatesReloadAll)
	t.Run("Offers", testOffersReloadAll)
	t.Run("Permissions", testPermissionsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Categories", testCategoriesSelect)
	t.Run("Companies", testCompaniesSelect)
	t.Run("ContractTemplates", testContractTemplatesSelect)
	t.Run("Offers", testOffersSelect)
	t.Run("Permissions", testPermissionsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Categories", testCategoriesUpdate)
	t.Run("Companies", testCompaniesUpdate)
	t.Run("ContractTemplates", testContractTemplatesUpdate)
	t.Run("Offers", testOffersUpdate)
	t.Run("Permissions", testPermissionsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("Companies", testCompaniesSliceUpdateAll)
	t.Run("ContractTemplates", testContractTemplatesSliceUpdateAll)
	t.Run("Offers", testOffersSliceUpdateAll)
	t.Run("Permissions", testPermissionsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
