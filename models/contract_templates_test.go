// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testContractTemplates(t *testing.T) {
	t.Parallel()

	query := ContractTemplates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testContractTemplatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContractTemplatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ContractTemplates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContractTemplatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContractTemplateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContractTemplatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ContractTemplateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ContractTemplate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContractTemplateExists to return true, but got false.")
	}
}

func testContractTemplatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	contractTemplateFound, err := FindContractTemplate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if contractTemplateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testContractTemplatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ContractTemplates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testContractTemplatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ContractTemplates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContractTemplatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contractTemplateOne := &ContractTemplate{}
	contractTemplateTwo := &ContractTemplate{}
	if err = randomize.Struct(seed, contractTemplateOne, contractTemplateDBTypes, false, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}
	if err = randomize.Struct(seed, contractTemplateTwo, contractTemplateDBTypes, false, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contractTemplateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contractTemplateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContractTemplates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContractTemplatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	contractTemplateOne := &ContractTemplate{}
	contractTemplateTwo := &ContractTemplate{}
	if err = randomize.Struct(seed, contractTemplateOne, contractTemplateDBTypes, false, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}
	if err = randomize.Struct(seed, contractTemplateTwo, contractTemplateDBTypes, false, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = contractTemplateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contractTemplateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func contractTemplateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
	*o = ContractTemplate{}
	return nil
}

func contractTemplateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
	*o = ContractTemplate{}
	return nil
}

func contractTemplateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
	*o = ContractTemplate{}
	return nil
}

func contractTemplateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
	*o = ContractTemplate{}
	return nil
}

func contractTemplateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
	*o = ContractTemplate{}
	return nil
}

func contractTemplateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
	*o = ContractTemplate{}
	return nil
}

func contractTemplateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
	*o = ContractTemplate{}
	return nil
}

func contractTemplateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
	*o = ContractTemplate{}
	return nil
}

func contractTemplateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ContractTemplate) error {
	*o = ContractTemplate{}
	return nil
}

func testContractTemplatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ContractTemplate{}
	o := &ContractTemplate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ContractTemplate object: %s", err)
	}

	AddContractTemplateHook(boil.BeforeInsertHook, contractTemplateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	contractTemplateBeforeInsertHooks = []ContractTemplateHook{}

	AddContractTemplateHook(boil.AfterInsertHook, contractTemplateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	contractTemplateAfterInsertHooks = []ContractTemplateHook{}

	AddContractTemplateHook(boil.AfterSelectHook, contractTemplateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	contractTemplateAfterSelectHooks = []ContractTemplateHook{}

	AddContractTemplateHook(boil.BeforeUpdateHook, contractTemplateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	contractTemplateBeforeUpdateHooks = []ContractTemplateHook{}

	AddContractTemplateHook(boil.AfterUpdateHook, contractTemplateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	contractTemplateAfterUpdateHooks = []ContractTemplateHook{}

	AddContractTemplateHook(boil.BeforeDeleteHook, contractTemplateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	contractTemplateBeforeDeleteHooks = []ContractTemplateHook{}

	AddContractTemplateHook(boil.AfterDeleteHook, contractTemplateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	contractTemplateAfterDeleteHooks = []ContractTemplateHook{}

	AddContractTemplateHook(boil.BeforeUpsertHook, contractTemplateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	contractTemplateBeforeUpsertHooks = []ContractTemplateHook{}

	AddContractTemplateHook(boil.AfterUpsertHook, contractTemplateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	contractTemplateAfterUpsertHooks = []ContractTemplateHook{}
}

func testContractTemplatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContractTemplatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(contractTemplateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContractTemplateToManyOffers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ContractTemplate
	var b, c Offer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContractTemplateID = a.ID
	c.ContractTemplateID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Offers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ContractTemplateID == b.ContractTemplateID {
			bFound = true
		}
		if v.ContractTemplateID == c.ContractTemplateID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ContractTemplateSlice{&a}
	if err = a.L.LoadOffers(ctx, tx, false, (*[]*ContractTemplate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Offers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Offers = nil
	if err = a.L.LoadOffers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Offers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testContractTemplateToManyAddOpOffers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ContractTemplate
	var b, c, d, e Offer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contractTemplateDBTypes, false, strmangle.SetComplement(contractTemplatePrimaryKeyColumns, contractTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Offer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, offerDBTypes, false, strmangle.SetComplement(offerPrimaryKeyColumns, offerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Offer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOffers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ContractTemplateID {
			t.Error("foreign key was wrong value", a.ID, first.ContractTemplateID)
		}
		if a.ID != second.ContractTemplateID {
			t.Error("foreign key was wrong value", a.ID, second.ContractTemplateID)
		}

		if first.R.ContractTemplate != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ContractTemplate != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Offers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Offers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Offers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testContractTemplateToOneCompanyUsingCompany(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ContractTemplate
	var foreign Company

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, contractTemplateDBTypes, false, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CompanyID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Company().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCompanyHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Company) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ContractTemplateSlice{&local}
	if err = local.L.LoadCompany(ctx, tx, false, (*[]*ContractTemplate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Company = nil
	if err = local.L.LoadCompany(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testContractTemplateToOneSetOpCompanyUsingCompany(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ContractTemplate
	var b, c Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contractTemplateDBTypes, false, strmangle.SetComplement(contractTemplatePrimaryKeyColumns, contractTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Company{&b, &c} {
		err = a.SetCompany(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Company != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ContractTemplates[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CompanyID != x.ID {
			t.Error("foreign key was wrong value", a.CompanyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CompanyID))
		reflect.Indirect(reflect.ValueOf(&a.CompanyID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CompanyID != x.ID {
			t.Error("foreign key was wrong value", a.CompanyID, x.ID)
		}
	}
}

func testContractTemplatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContractTemplatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContractTemplateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testContractTemplatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContractTemplates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	contractTemplateDBTypes = map[string]string{`ID`: `uuid`, `Name`: `text`, `CompanyID`: `uuid`, `Template`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                       = bytes.MinRead
)

func testContractTemplatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(contractTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(contractTemplateAllColumns) == len(contractTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testContractTemplatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(contractTemplateAllColumns) == len(contractTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContractTemplate{}
	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contractTemplateDBTypes, true, contractTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(contractTemplateAllColumns, contractTemplatePrimaryKeyColumns) {
		fields = contractTemplateAllColumns
	} else {
		fields = strmangle.SetComplement(
			contractTemplateAllColumns,
			contractTemplatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ContractTemplateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testContractTemplatesUpsert(t *testing.T) {
	t.Parallel()

	if len(contractTemplateAllColumns) == len(contractTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ContractTemplate{}
	if err = randomize.Struct(seed, &o, contractTemplateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContractTemplate: %s", err)
	}

	count, err := ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, contractTemplateDBTypes, false, contractTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContractTemplate struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContractTemplate: %s", err)
	}

	count, err = ContractTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
