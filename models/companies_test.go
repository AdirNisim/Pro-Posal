// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompanies(t *testing.T) {
	t.Parallel()

	query := Companies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompaniesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Companies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompanyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Company exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompanyExists to return true, but got false.")
	}
}

func testCompaniesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	companyFound, err := FindCompany(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if companyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompaniesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Companies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompaniesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Companies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompaniesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	companyOne := &Company{}
	companyTwo := &Company{}
	if err = randomize.Struct(seed, companyOne, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err = randomize.Struct(seed, companyTwo, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Companies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompaniesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	companyOne := &Company{}
	companyTwo := &Company{}
	if err = randomize.Struct(seed, companyOne, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err = randomize.Struct(seed, companyTwo, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func companyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func companyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Company) error {
	*o = Company{}
	return nil
}

func testCompaniesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Company{}
	o := &Company{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, companyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Company object: %s", err)
	}

	AddCompanyHook(boil.BeforeInsertHook, companyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	companyBeforeInsertHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterInsertHook, companyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	companyAfterInsertHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterSelectHook, companyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	companyAfterSelectHooks = []CompanyHook{}

	AddCompanyHook(boil.BeforeUpdateHook, companyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	companyBeforeUpdateHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterUpdateHook, companyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	companyAfterUpdateHooks = []CompanyHook{}

	AddCompanyHook(boil.BeforeDeleteHook, companyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	companyBeforeDeleteHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterDeleteHook, companyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	companyAfterDeleteHooks = []CompanyHook{}

	AddCompanyHook(boil.BeforeUpsertHook, companyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	companyBeforeUpsertHooks = []CompanyHook{}

	AddCompanyHook(boil.AfterUpsertHook, companyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	companyAfterUpsertHooks = []CompanyHook{}
}

func testCompaniesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompaniesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(companyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompanyToManyCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CompanyID = a.ID
	c.CompanyID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Categories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CompanyID == b.CompanyID {
			bFound = true
		}
		if v.CompanyID == c.CompanyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompanySlice{&a}
	if err = a.L.LoadCategories(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Categories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Categories = nil
	if err = a.L.LoadCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Categories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompanyToManyContractTemplates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c ContractTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, contractTemplateDBTypes, false, contractTemplateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contractTemplateDBTypes, false, contractTemplateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CompanyID = a.ID
	c.CompanyID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ContractTemplates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CompanyID == b.CompanyID {
			bFound = true
		}
		if v.CompanyID == c.CompanyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompanySlice{&a}
	if err = a.L.LoadContractTemplates(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ContractTemplates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ContractTemplates = nil
	if err = a.L.LoadContractTemplates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ContractTemplates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompanyToManyOffers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c Offer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, offerDBTypes, false, offerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CompanyID = a.ID
	c.CompanyID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Offers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CompanyID == b.CompanyID {
			bFound = true
		}
		if v.CompanyID == c.CompanyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompanySlice{&a}
	if err = a.L.LoadOffers(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Offers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Offers = nil
	if err = a.L.LoadOffers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Offers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompanyToManyPermissions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c Permission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, permissionDBTypes, false, permissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, permissionDBTypes, false, permissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CompanyID = a.ID
	c.CompanyID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Permissions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CompanyID == b.CompanyID {
			bFound = true
		}
		if v.CompanyID == c.CompanyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompanySlice{&a}
	if err = a.L.LoadPermissions(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Permissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Permissions = nil
	if err = a.L.LoadPermissions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Permissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompanyToManyAddOpCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Category{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Category{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CompanyID {
			t.Error("foreign key was wrong value", a.ID, first.CompanyID)
		}
		if a.ID != second.CompanyID {
			t.Error("foreign key was wrong value", a.ID, second.CompanyID)
		}

		if first.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Categories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Categories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Categories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCompanyToManyAddOpContractTemplates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e ContractTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ContractTemplate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, contractTemplateDBTypes, false, strmangle.SetComplement(contractTemplatePrimaryKeyColumns, contractTemplateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ContractTemplate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddContractTemplates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CompanyID {
			t.Error("foreign key was wrong value", a.ID, first.CompanyID)
		}
		if a.ID != second.CompanyID {
			t.Error("foreign key was wrong value", a.ID, second.CompanyID)
		}

		if first.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ContractTemplates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ContractTemplates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ContractTemplates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCompanyToManyAddOpOffers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e Offer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Offer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, offerDBTypes, false, strmangle.SetComplement(offerPrimaryKeyColumns, offerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Offer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOffers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CompanyID {
			t.Error("foreign key was wrong value", a.ID, first.CompanyID)
		}
		if a.ID != second.CompanyID {
			t.Error("foreign key was wrong value", a.ID, second.CompanyID)
		}

		if first.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Offers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Offers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Offers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCompanyToManyAddOpPermissions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e Permission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Permission{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, permissionDBTypes, false, strmangle.SetComplement(permissionPrimaryKeyColumns, permissionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Permission{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPermissions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CompanyID {
			t.Error("foreign key was wrong value", a.ID, first.CompanyID)
		}
		if a.ID != second.CompanyID {
			t.Error("foreign key was wrong value", a.ID, second.CompanyID)
		}

		if first.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Permissions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Permissions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Permissions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCompanyToOneUserUsingContact(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Company
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ContactID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Contact().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CompanySlice{&local}
	if err = local.L.LoadContact(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Contact == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Contact = nil
	if err = local.L.LoadContact(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Contact == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCompanyToOneSetOpUserUsingContact(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetContact(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Contact != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ContactCompanies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ContactID != x.ID {
			t.Error("foreign key was wrong value", a.ContactID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ContactID))
		reflect.Indirect(reflect.ValueOf(&a.ContactID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ContactID != x.ID {
			t.Error("foreign key was wrong value", a.ContactID, x.ID)
		}
	}
}

func testCompaniesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Companies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	companyDBTypes = map[string]string{`ID`: `uuid`, `Name`: `text`, `ContactID`: `uuid`, `Address`: `text`, `LogoBase64`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testCompaniesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(companyAllColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyDBTypes, true, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompaniesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(companyAllColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyDBTypes, true, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(companyAllColumns, companyPrimaryKeyColumns) {
		fields = companyAllColumns
	} else {
		fields = strmangle.SetComplement(
			companyAllColumns,
			companyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompanySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompaniesUpsert(t *testing.T) {
	t.Parallel()

	if len(companyAllColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Company{}
	if err = randomize.Struct(seed, &o, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Company: %s", err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, companyDBTypes, false, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Company: %s", err)
	}

	count, err = Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
